// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: products_admin.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductsAdminService_AddProduct_FullMethodName     = "/products_admin.ProductsAdminService/AddProduct"
	ProductsAdminService_UpdateProduct_FullMethodName  = "/products_admin.ProductsAdminService/UpdateProduct"
	ProductsAdminService_DeleteProduct_FullMethodName  = "/products_admin.ProductsAdminService/DeleteProduct"
	ProductsAdminService_ApplyDiscount_FullMethodName  = "/products_admin.ProductsAdminService/ApplyDiscount"
	ProductsAdminService_RemoveDiscount_FullMethodName = "/products_admin.ProductsAdminService/RemoveDiscount"
	ProductsAdminService_AddStock_FullMethodName       = "/products_admin.ProductsAdminService/AddStock"
)

// ProductsAdminServiceClient is the client API for ProductsAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsAdminServiceClient interface {
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	ApplyDiscount(ctx context.Context, in *ApplyDiscountRequest, opts ...grpc.CallOption) (*ApplyDiscountResponse, error)
	RemoveDiscount(ctx context.Context, in *RemoveDiscountRequest, opts ...grpc.CallOption) (*RemoveDiscountResponse, error)
	AddStock(ctx context.Context, in *AddStockRequest, opts ...grpc.CallOption) (*AddStockResponse, error)
}

type productsAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsAdminServiceClient(cc grpc.ClientConnInterface) ProductsAdminServiceClient {
	return &productsAdminServiceClient{cc}
}

func (c *productsAdminServiceClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, ProductsAdminService_AddProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsAdminServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, ProductsAdminService_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsAdminServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	out := new(DeleteProductResponse)
	err := c.cc.Invoke(ctx, ProductsAdminService_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsAdminServiceClient) ApplyDiscount(ctx context.Context, in *ApplyDiscountRequest, opts ...grpc.CallOption) (*ApplyDiscountResponse, error) {
	out := new(ApplyDiscountResponse)
	err := c.cc.Invoke(ctx, ProductsAdminService_ApplyDiscount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsAdminServiceClient) RemoveDiscount(ctx context.Context, in *RemoveDiscountRequest, opts ...grpc.CallOption) (*RemoveDiscountResponse, error) {
	out := new(RemoveDiscountResponse)
	err := c.cc.Invoke(ctx, ProductsAdminService_RemoveDiscount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsAdminServiceClient) AddStock(ctx context.Context, in *AddStockRequest, opts ...grpc.CallOption) (*AddStockResponse, error) {
	out := new(AddStockResponse)
	err := c.cc.Invoke(ctx, ProductsAdminService_AddStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsAdminServiceServer is the server API for ProductsAdminService service.
// All implementations must embed UnimplementedProductsAdminServiceServer
// for forward compatibility
type ProductsAdminServiceServer interface {
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	ApplyDiscount(context.Context, *ApplyDiscountRequest) (*ApplyDiscountResponse, error)
	RemoveDiscount(context.Context, *RemoveDiscountRequest) (*RemoveDiscountResponse, error)
	AddStock(context.Context, *AddStockRequest) (*AddStockResponse, error)
	mustEmbedUnimplementedProductsAdminServiceServer()
}

// UnimplementedProductsAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductsAdminServiceServer struct {
}

func (UnimplementedProductsAdminServiceServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductsAdminServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductsAdminServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductsAdminServiceServer) ApplyDiscount(context.Context, *ApplyDiscountRequest) (*ApplyDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyDiscount not implemented")
}
func (UnimplementedProductsAdminServiceServer) RemoveDiscount(context.Context, *RemoveDiscountRequest) (*RemoveDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDiscount not implemented")
}
func (UnimplementedProductsAdminServiceServer) AddStock(context.Context, *AddStockRequest) (*AddStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStock not implemented")
}
func (UnimplementedProductsAdminServiceServer) mustEmbedUnimplementedProductsAdminServiceServer() {}

// UnsafeProductsAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsAdminServiceServer will
// result in compilation errors.
type UnsafeProductsAdminServiceServer interface {
	mustEmbedUnimplementedProductsAdminServiceServer()
}

func RegisterProductsAdminServiceServer(s grpc.ServiceRegistrar, srv ProductsAdminServiceServer) {
	s.RegisterService(&ProductsAdminService_ServiceDesc, srv)
}

func _ProductsAdminService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAdminServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsAdminService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAdminServiceServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsAdminService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAdminServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsAdminService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAdminServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsAdminService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAdminServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsAdminService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAdminServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsAdminService_ApplyDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAdminServiceServer).ApplyDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsAdminService_ApplyDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAdminServiceServer).ApplyDiscount(ctx, req.(*ApplyDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsAdminService_RemoveDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAdminServiceServer).RemoveDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsAdminService_RemoveDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAdminServiceServer).RemoveDiscount(ctx, req.(*RemoveDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsAdminService_AddStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAdminServiceServer).AddStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsAdminService_AddStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAdminServiceServer).AddStock(ctx, req.(*AddStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductsAdminService_ServiceDesc is the grpc.ServiceDesc for ProductsAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductsAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products_admin.ProductsAdminService",
	HandlerType: (*ProductsAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _ProductsAdminService_AddProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductsAdminService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductsAdminService_DeleteProduct_Handler,
		},
		{
			MethodName: "ApplyDiscount",
			Handler:    _ProductsAdminService_ApplyDiscount_Handler,
		},
		{
			MethodName: "RemoveDiscount",
			Handler:    _ProductsAdminService_RemoveDiscount_Handler,
		},
		{
			MethodName: "AddStock",
			Handler:    _ProductsAdminService_AddStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "products_admin.proto",
}
