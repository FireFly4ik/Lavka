// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: products_customer.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductsCustomerService_Category_FullMethodName      = "/products_customer.ProductsCustomerService/Category"
	ProductsCustomerService_Product_FullMethodName       = "/products_customer.ProductsCustomerService/Product"
	ProductsCustomerService_SearchProduct_FullMethodName = "/products_customer.ProductsCustomerService/SearchProduct"
	ProductsCustomerService_Discount_FullMethodName      = "/products_customer.ProductsCustomerService/Discount"
	ProductsCustomerService_GetStock_FullMethodName      = "/products_customer.ProductsCustomerService/GetStock"
)

// ProductsCustomerServiceClient is the client API for ProductsCustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsCustomerServiceClient interface {
	Category(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	Product(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	SearchProduct(ctx context.Context, in *SearchProductRequest, opts ...grpc.CallOption) (*SearchProductResponse, error)
	Discount(ctx context.Context, in *DiscountRequest, opts ...grpc.CallOption) (*DiscountResponse, error)
	GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*GetStockResponse, error)
}

type productsCustomerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsCustomerServiceClient(cc grpc.ClientConnInterface) ProductsCustomerServiceClient {
	return &productsCustomerServiceClient{cc}
}

func (c *productsCustomerServiceClient) Category(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, ProductsCustomerService_Category_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsCustomerServiceClient) Product(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, ProductsCustomerService_Product_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsCustomerServiceClient) SearchProduct(ctx context.Context, in *SearchProductRequest, opts ...grpc.CallOption) (*SearchProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchProductResponse)
	err := c.cc.Invoke(ctx, ProductsCustomerService_SearchProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsCustomerServiceClient) Discount(ctx context.Context, in *DiscountRequest, opts ...grpc.CallOption) (*DiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscountResponse)
	err := c.cc.Invoke(ctx, ProductsCustomerService_Discount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsCustomerServiceClient) GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*GetStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockResponse)
	err := c.cc.Invoke(ctx, ProductsCustomerService_GetStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsCustomerServiceServer is the server API for ProductsCustomerService service.
// All implementations must embed UnimplementedProductsCustomerServiceServer
// for forward compatibility.
type ProductsCustomerServiceServer interface {
	Category(context.Context, *CategoryRequest) (*CategoryResponse, error)
	Product(context.Context, *ProductRequest) (*ProductResponse, error)
	SearchProduct(context.Context, *SearchProductRequest) (*SearchProductResponse, error)
	Discount(context.Context, *DiscountRequest) (*DiscountResponse, error)
	GetStock(context.Context, *GetStockRequest) (*GetStockResponse, error)
	mustEmbedUnimplementedProductsCustomerServiceServer()
}

// UnimplementedProductsCustomerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductsCustomerServiceServer struct{}

func (UnimplementedProductsCustomerServiceServer) Category(context.Context, *CategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category not implemented")
}
func (UnimplementedProductsCustomerServiceServer) Product(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Product not implemented")
}
func (UnimplementedProductsCustomerServiceServer) SearchProduct(context.Context, *SearchProductRequest) (*SearchProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (UnimplementedProductsCustomerServiceServer) Discount(context.Context, *DiscountRequest) (*DiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discount not implemented")
}
func (UnimplementedProductsCustomerServiceServer) GetStock(context.Context, *GetStockRequest) (*GetStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}
func (UnimplementedProductsCustomerServiceServer) mustEmbedUnimplementedProductsCustomerServiceServer() {
}
func (UnimplementedProductsCustomerServiceServer) testEmbeddedByValue() {}

// UnsafeProductsCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsCustomerServiceServer will
// result in compilation errors.
type UnsafeProductsCustomerServiceServer interface {
	mustEmbedUnimplementedProductsCustomerServiceServer()
}

func RegisterProductsCustomerServiceServer(s grpc.ServiceRegistrar, srv ProductsCustomerServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductsCustomerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductsCustomerService_ServiceDesc, srv)
}

func _ProductsCustomerService_Category_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsCustomerServiceServer).Category(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsCustomerService_Category_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsCustomerServiceServer).Category(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsCustomerService_Product_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsCustomerServiceServer).Product(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsCustomerService_Product_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsCustomerServiceServer).Product(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsCustomerService_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsCustomerServiceServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsCustomerService_SearchProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsCustomerServiceServer).SearchProduct(ctx, req.(*SearchProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsCustomerService_Discount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsCustomerServiceServer).Discount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsCustomerService_Discount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsCustomerServiceServer).Discount(ctx, req.(*DiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsCustomerService_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsCustomerServiceServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsCustomerService_GetStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsCustomerServiceServer).GetStock(ctx, req.(*GetStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductsCustomerService_ServiceDesc is the grpc.ServiceDesc for ProductsCustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductsCustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products_customer.ProductsCustomerService",
	HandlerType: (*ProductsCustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Category",
			Handler:    _ProductsCustomerService_Category_Handler,
		},
		{
			MethodName: "Product",
			Handler:    _ProductsCustomerService_Product_Handler,
		},
		{
			MethodName: "SearchProduct",
			Handler:    _ProductsCustomerService_SearchProduct_Handler,
		},
		{
			MethodName: "Discount",
			Handler:    _ProductsCustomerService_Discount_Handler,
		},
		{
			MethodName: "GetStock",
			Handler:    _ProductsCustomerService_GetStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "products_customer.proto",
}
